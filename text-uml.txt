static InstructionSet
  init(); // Should be called at load time
  int getType(String instruction); (Backed by HashMap)
  int getOpCode(String instruction); (Backed by HashMap)
  int getFunct(String instruction); (Backed by HashMap)
    -1 for non-r-type
  Enum instructions
    Stores instruction type, instruction opcode, and instruction funct
  Enum InstructionType
    R,I,J, later expandable to FR, FJ

static Registers
  Hashmap registers
    Maps register name to value

Instruction
  int address;
  String instruction, source, target, destination, label;
    //Destination will hold immediates and jump addresses
  Enum type; R, I, J (Later could add FR, FJ if later assignment uses it)
  setLabel
  —Getters—
  setJType(Address, Instruction, destination)
  setRType(Address, Instruction, source, target, destination)
  setIType(Address, Instruction, source, target, destination)
  toString(); // Formats for output

Driver
  ArrayList<String, Integer (Address)> symbolTable: HashMap from label text to address integer
  Reads in lines and creates instruction objects.
    Check types and that the number of arguments makes sense
    Recommend following the 2-step loading
      1st step: Build symbol table, count instructions to make array
      2nd step: Load instruction data
  Outputs
